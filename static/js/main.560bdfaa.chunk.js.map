{"version":3,"sources":["logo.svg","Navegacio.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","buttonCartaStyles","makeStyles","theme","root","color","palette","secondary","main","backgroundColor","primary","light","borderRadius","top","maxWidth","height","selected","buttonStyles","bottomNavStyles","width","position","bottom","Navegacio","cartaClasses","buttonClasses","navClasses","React","useState","value","setValue","BottomNavigation","onChange","event","newValue","showLabels","className","BottomNavigationAction","classes","icon","HomeRounded","label","RestaurantMenuRounded","ShoppingCart","useStyles","content","background","default","minHeight","darkTheme","createMuiTheme","paper","App","ThemeProvider","AppBar","Toolbar","Typography","align","variant","title","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yIAAAA,EAAOC,QAAU,IAA0B,kC,8NCMrCC,EAAoBC,aAAW,SAAAC,GAAK,MAAK,CAE7CC,KAAM,CACJC,MAAOF,EAAMG,QAAQC,UAAUC,KAC/B,aAAc,CACZC,gBAAiBN,EAAMG,QAAQI,QAAQC,MACvCN,MAAOF,EAAMG,QAAQC,UAAUC,MAEjCC,gBAAiBN,EAAMG,QAAQI,QAAQF,KACvCI,aAAa,MACbC,IAAK,QACLC,SAAU,IACVC,OAAQ,QAGVC,SAAS,OAELC,EAAef,aAAW,SAAAC,GAAK,MAAK,CAExCC,KAAM,CACJC,MAAOF,EAAMG,QAAQC,UAAUI,MAC/B,aAAc,CACZN,MAAO,UAGXW,SAAS,OAELE,EAAkBhB,aAAW,SAAAC,GAAK,MAAK,CAE3CC,KAAM,CACJe,MAAO,OACPC,SAAU,QACVC,OAAQ,EACRZ,gBAAiBN,EAAMG,QAAQC,UAAUC,UAI9B,SAASc,IACtB,IAAMC,EAAetB,IACfuB,EAAgBP,IAChBQ,EAAaP,IAHe,EAIRQ,IAAMC,SAAS,GAJP,mBAI3BC,EAJ2B,KAIpBC,EAJoB,KAMlC,OACE,kBAACC,EAAA,EAAD,CACIF,MAAOA,EACPG,SAAU,SAACC,EAAOC,GAAcJ,EAASI,IACzCC,YAAU,EACVC,UAAWV,EAAWrB,MAEtB,kBAACgC,EAAA,EAAD,CAAwBC,QAAWb,EAAec,KAAO,kBAACC,EAAA,EAAD,QACzD,kBAACH,EAAA,EAAD,CAAwBC,QAASd,EAAciB,MAAQ,QAAQF,KAAO,kBAACG,EAAA,EAAD,QACtE,kBAACL,EAAA,EAAD,CAAwBC,QAAWb,EAAec,KAAO,kBAACI,EAAA,EAAD,SC9CjE,IAAMC,EAAYzC,aAAW,SAAAC,GAAK,MAAK,CACrCyC,QAAS,CACPnC,gBAAiBN,EAAMG,QAAQuC,WAAWC,QAC1CC,UAAW,YAKTC,EAAYC,YAAe,CAC/B3C,QAAS,CACPI,QAAS,CACPF,KAAK,WAEPD,UAAW,CACTC,KAAK,WAEPqC,WAAY,CACVK,MAAO,UACPJ,QAAS,cA+BAK,MA1Bf,WACE,IAAMd,EAAUM,IAEhB,OACE,kBAACS,EAAA,EAAD,CAAejD,MAAO6C,GAClB,6BACE,kBAACK,EAAA,EAAD,CAAQjC,SAAS,SAASf,MAAM,aAC9B,kBAACiD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,OAAOC,QAAQ,KAAKtB,UAAWE,EAAQqB,OAAzD,eAMN,kBAACC,EAAA,EAAD,CAAWxB,UAAWE,EAAQO,SAC5B,gCACI,kBAACW,EAAA,EAAD,CAAYC,MAAM,SAASC,QAAQ,MAAnC,0BAKR,kBAACnC,EAAD,QC5CcsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.560bdfaa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport { makeStyles} from '@material-ui/core/styles';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport {ShoppingCart, HomeRounded, RestaurantMenuRounded} from '@material-ui/icons/'\r\n\r\nconst buttonCartaStyles = makeStyles(theme => ({\r\n  //style pel boto carta\r\n  root: {\r\n    color: theme.palette.secondary.main,\r\n    \"&$selected\": {\r\n      backgroundColor: theme.palette.primary.light,\r\n      color: theme.palette.secondary.main,\r\n    },\r\n    backgroundColor: theme.palette.primary.main,\r\n    borderRadius:\"50%\",\r\n    top: \"-35px\",\r\n    maxWidth: \"0\",\r\n    height: \"130%\"\r\n\r\n  },\r\n  selected:{}\r\n}))\r\nconst buttonStyles = makeStyles(theme => ({\r\n  //style pels altres botons\r\n  root: {\r\n    color: theme.palette.secondary.light,\r\n    \"&$selected\": {\r\n      color: \"white\",\r\n    },\r\n  },\r\n  selected:{}\r\n}))\r\nconst bottomNavStyles = makeStyles(theme => ({\r\n  //style per la navigation\r\n  root: {\r\n    width: '100%',\r\n    position: 'fixed',\r\n    bottom: 0,\r\n    backgroundColor: theme.palette.secondary.main\r\n  },\r\n\r\n}))\r\nexport default function Navegacio() {\r\n  const cartaClasses = buttonCartaStyles();\r\n  const buttonClasses = buttonStyles();\r\n  const navClasses = bottomNavStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  return (\r\n    <BottomNavigation\r\n        value={value}\r\n        onChange={(event, newValue) => {setValue(newValue);}}\r\n        showLabels\r\n        className={navClasses.root}\r\n    >\r\n        <BottomNavigationAction classes = {buttonClasses} icon ={<HomeRounded/>} />\r\n        <BottomNavigationAction classes={cartaClasses} label = \"Carta\" icon ={<RestaurantMenuRounded /> } />\r\n        <BottomNavigationAction classes = {buttonClasses} icon ={<ShoppingCart/>} />\r\n    </BottomNavigation>\r\n  );\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles} from '@material-ui/core/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport './App.css';\nimport Navegacio from \"./Navegacio\";\n\nconst useStyles = makeStyles(theme => ({\n  content: {\n    backgroundColor: theme.palette.background.default,\n    minHeight: '90vh'\n  }\n}))\n\n//TEMA DE LA APP\nconst darkTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main:'#80d6d1'\n    },\n    secondary: {\n      main:'#303030'\n    },\n    background: {\n      paper: '#e5e5e5',\n      default: '#e5e5e5'\n    }\n  },\n});\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <ThemeProvider theme={darkTheme}>\n        <div>\n          <AppBar position=\"static\" color=\"secondary\">\n            <Toolbar>\n              <Typography align='left' variant=\"h5\" className={classes.title}>\n                YourMeal\n              </Typography>\n            </Toolbar>\n          </AppBar>\n        </div>\n        <Container className={classes.content}>\n          <header>\n              <Typography align=\"center\" variant=\"h5\">\n                Benvingut a YourMeal  \n              </Typography>\n          </header>\n        </Container>\n      <Navegacio/>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}